// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Ounchecked -module-name DBDebugToolkit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
@_exported import DBDebugToolkit
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc extension Foundation.Bundle {
  @objc public static var applicationName: Swift.String {
    @objc get
  }
  @objc public static var buildVersion: Swift.String {
    @objc get
  }
  @objc public static var buildNumber: Swift.String {
    @objc get
  }
  @objc public static var buildInfoString: Swift.String? {
    @objc get
  }
}
@_Concurrency.MainActor(unsafe) public struct MenuList : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14DBDebugToolkit8MenuListV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers final public class MenuViewModel : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SwiftUIViewFactory : ObjectiveC.NSObject {
  @objc public static func makeMenuListView(performanceToolkit: DBDebugToolkit.DBPerformanceToolkit, consoleOutputCaptor: DBDebugToolkit.DBConsoleOutputCaptor, networkToolkit: DBDebugToolkit.DBNetworkToolkit, userInterfaceToolkit: DBDebugToolkit.DBUserInterfaceToolkit, locationToolkit: DBDebugToolkit.DBLocationToolkit, coreDataToolkit: DBDebugToolkit.DBCoreDataToolkit, crashReportsToolkit: DBDebugToolkit.DBCrashReportsToolkit, deviceInfoProvider: DBDebugToolkit.DBDeviceInfoProvider, customVariables: [Swift.String : DBDebugToolkit.DBCustomVariable], customActions: [DBDebugToolkit.DBCustomAction], menuDismissAction: @escaping () -> Swift.Void) -> UIKit.UIViewController
  @objc override dynamic public init()
  @objc deinit
}
@objc extension UIKit.UIWindow {
  @objc @_Concurrency.MainActor(unsafe) public static var keyWindow: UIKit.UIWindow? {
    @objc get
  }
}
